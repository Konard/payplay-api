<?php
/**
 * GetCryptoOrderSlug200ResponseOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PayPlayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PayPlay API
 *
 * PayPlay API documentation generated from markdown files
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayPlayClient\Model;

use \ArrayAccess;
use \PayPlayClient\ObjectSerializer;

/**
 * GetCryptoOrderSlug200ResponseOrder Class Doc Comment
 *
 * @category Class
 * @package  PayPlayClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCryptoOrderSlug200ResponseOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getCryptoOrderSlug_200_response_order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'currency' => 'string',
        'order_number' => 'string',
        'value' => 'string',
        'expected_amount' => 'string',
        'received_total' => 'string',
        'exchange_rate' => 'string',
        'clean_exchange_rate' => 'string',
        'is_internal' => 'string',
        'deposited_currency' => 'string',
        'received_currency' => 'string',
        'status' => 'string',
        'external_order_id' => 'string',
        'created_at' => 'string',
        'completed_at' => 'string',
        'acquiring_url' => 'string',
        'successful_link' => 'string',
        'failure_link' => 'string',
        'transactions' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'currency' => null,
        'order_number' => null,
        'value' => null,
        'expected_amount' => null,
        'received_total' => null,
        'exchange_rate' => null,
        'clean_exchange_rate' => null,
        'is_internal' => null,
        'deposited_currency' => null,
        'received_currency' => null,
        'status' => null,
        'external_order_id' => null,
        'created_at' => null,
        'completed_at' => null,
        'acquiring_url' => null,
        'successful_link' => null,
        'failure_link' => null,
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'currency' => false,
        'order_number' => false,
        'value' => false,
        'expected_amount' => false,
        'received_total' => false,
        'exchange_rate' => false,
        'clean_exchange_rate' => false,
        'is_internal' => false,
        'deposited_currency' => false,
        'received_currency' => false,
        'status' => false,
        'external_order_id' => false,
        'created_at' => false,
        'completed_at' => false,
        'acquiring_url' => false,
        'successful_link' => false,
        'failure_link' => false,
        'transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'currency' => 'currency',
        'order_number' => 'order_number',
        'value' => 'value',
        'expected_amount' => 'expected_amount',
        'received_total' => 'received_total',
        'exchange_rate' => 'exchange_rate',
        'clean_exchange_rate' => 'clean_exchange_rate',
        'is_internal' => 'is_internal',
        'deposited_currency' => 'deposited_currency',
        'received_currency' => 'received_currency',
        'status' => 'status',
        'external_order_id' => 'external_order_id',
        'created_at' => 'created_at',
        'completed_at' => 'completed_at',
        'acquiring_url' => 'acquiring_url',
        'successful_link' => 'successful_link',
        'failure_link' => 'failure_link',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'currency' => 'setCurrency',
        'order_number' => 'setOrderNumber',
        'value' => 'setValue',
        'expected_amount' => 'setExpectedAmount',
        'received_total' => 'setReceivedTotal',
        'exchange_rate' => 'setExchangeRate',
        'clean_exchange_rate' => 'setCleanExchangeRate',
        'is_internal' => 'setIsInternal',
        'deposited_currency' => 'setDepositedCurrency',
        'received_currency' => 'setReceivedCurrency',
        'status' => 'setStatus',
        'external_order_id' => 'setExternalOrderId',
        'created_at' => 'setCreatedAt',
        'completed_at' => 'setCompletedAt',
        'acquiring_url' => 'setAcquiringUrl',
        'successful_link' => 'setSuccessfulLink',
        'failure_link' => 'setFailureLink',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'currency' => 'getCurrency',
        'order_number' => 'getOrderNumber',
        'value' => 'getValue',
        'expected_amount' => 'getExpectedAmount',
        'received_total' => 'getReceivedTotal',
        'exchange_rate' => 'getExchangeRate',
        'clean_exchange_rate' => 'getCleanExchangeRate',
        'is_internal' => 'getIsInternal',
        'deposited_currency' => 'getDepositedCurrency',
        'received_currency' => 'getReceivedCurrency',
        'status' => 'getStatus',
        'external_order_id' => 'getExternalOrderId',
        'created_at' => 'getCreatedAt',
        'completed_at' => 'getCompletedAt',
        'acquiring_url' => 'getAcquiringUrl',
        'successful_link' => 'getSuccessfulLink',
        'failure_link' => 'getFailureLink',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('expected_amount', $data ?? [], null);
        $this->setIfExists('received_total', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('clean_exchange_rate', $data ?? [], null);
        $this->setIfExists('is_internal', $data ?? [], null);
        $this->setIfExists('deposited_currency', $data ?? [], null);
        $this->setIfExists('received_currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('external_order_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
        $this->setIfExists('acquiring_url', $data ?? [], null);
        $this->setIfExists('successful_link', $data ?? [], null);
        $this->setIfExists('failure_link', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['expected_amount'] === null) {
            $invalidProperties[] = "'expected_amount' can't be null";
        }
        if ($this->container['received_total'] === null) {
            $invalidProperties[] = "'received_total' can't be null";
        }
        if ($this->container['exchange_rate'] === null) {
            $invalidProperties[] = "'exchange_rate' can't be null";
        }
        if ($this->container['clean_exchange_rate'] === null) {
            $invalidProperties[] = "'clean_exchange_rate' can't be null";
        }
        if ($this->container['is_internal'] === null) {
            $invalidProperties[] = "'is_internal' can't be null";
        }
        if ($this->container['deposited_currency'] === null) {
            $invalidProperties[] = "'deposited_currency' can't be null";
        }
        if ($this->container['received_currency'] === null) {
            $invalidProperties[] = "'received_currency' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['external_order_id'] === null) {
            $invalidProperties[] = "'external_order_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['completed_at'] === null) {
            $invalidProperties[] = "'completed_at' can't be null";
        }
        if ($this->container['acquiring_url'] === null) {
            $invalidProperties[] = "'acquiring_url' can't be null";
        }
        if ($this->container['successful_link'] === null) {
            $invalidProperties[] = "'successful_link' can't be null";
        }
        if ($this->container['failure_link'] === null) {
            $invalidProperties[] = "'failure_link' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets expected_amount
     *
     * @return string
     */
    public function getExpectedAmount()
    {
        return $this->container['expected_amount'];
    }

    /**
     * Sets expected_amount
     *
     * @param string $expected_amount expected_amount
     *
     * @return self
     */
    public function setExpectedAmount($expected_amount)
    {
        if (is_null($expected_amount)) {
            throw new \InvalidArgumentException('non-nullable expected_amount cannot be null');
        }
        $this->container['expected_amount'] = $expected_amount;

        return $this;
    }

    /**
     * Gets received_total
     *
     * @return string
     */
    public function getReceivedTotal()
    {
        return $this->container['received_total'];
    }

    /**
     * Sets received_total
     *
     * @param string $received_total received_total
     *
     * @return self
     */
    public function setReceivedTotal($received_total)
    {
        if (is_null($received_total)) {
            throw new \InvalidArgumentException('non-nullable received_total cannot be null');
        }
        $this->container['received_total'] = $received_total;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets clean_exchange_rate
     *
     * @return string
     */
    public function getCleanExchangeRate()
    {
        return $this->container['clean_exchange_rate'];
    }

    /**
     * Sets clean_exchange_rate
     *
     * @param string $clean_exchange_rate clean_exchange_rate
     *
     * @return self
     */
    public function setCleanExchangeRate($clean_exchange_rate)
    {
        if (is_null($clean_exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable clean_exchange_rate cannot be null');
        }
        $this->container['clean_exchange_rate'] = $clean_exchange_rate;

        return $this;
    }

    /**
     * Gets is_internal
     *
     * @return string
     */
    public function getIsInternal()
    {
        return $this->container['is_internal'];
    }

    /**
     * Sets is_internal
     *
     * @param string $is_internal is_internal
     *
     * @return self
     */
    public function setIsInternal($is_internal)
    {
        if (is_null($is_internal)) {
            throw new \InvalidArgumentException('non-nullable is_internal cannot be null');
        }
        $this->container['is_internal'] = $is_internal;

        return $this;
    }

    /**
     * Gets deposited_currency
     *
     * @return string
     */
    public function getDepositedCurrency()
    {
        return $this->container['deposited_currency'];
    }

    /**
     * Sets deposited_currency
     *
     * @param string $deposited_currency deposited_currency
     *
     * @return self
     */
    public function setDepositedCurrency($deposited_currency)
    {
        if (is_null($deposited_currency)) {
            throw new \InvalidArgumentException('non-nullable deposited_currency cannot be null');
        }
        $this->container['deposited_currency'] = $deposited_currency;

        return $this;
    }

    /**
     * Gets received_currency
     *
     * @return string
     */
    public function getReceivedCurrency()
    {
        return $this->container['received_currency'];
    }

    /**
     * Sets received_currency
     *
     * @param string $received_currency received_currency
     *
     * @return self
     */
    public function setReceivedCurrency($received_currency)
    {
        if (is_null($received_currency)) {
            throw new \InvalidArgumentException('non-nullable received_currency cannot be null');
        }
        $this->container['received_currency'] = $received_currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets external_order_id
     *
     * @return string
     */
    public function getExternalOrderId()
    {
        return $this->container['external_order_id'];
    }

    /**
     * Sets external_order_id
     *
     * @param string $external_order_id external_order_id
     *
     * @return self
     */
    public function setExternalOrderId($external_order_id)
    {
        if (is_null($external_order_id)) {
            throw new \InvalidArgumentException('non-nullable external_order_id cannot be null');
        }
        $this->container['external_order_id'] = $external_order_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return string
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param string $completed_at completed_at
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            throw new \InvalidArgumentException('non-nullable completed_at cannot be null');
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets acquiring_url
     *
     * @return string
     */
    public function getAcquiringUrl()
    {
        return $this->container['acquiring_url'];
    }

    /**
     * Sets acquiring_url
     *
     * @param string $acquiring_url acquiring_url
     *
     * @return self
     */
    public function setAcquiringUrl($acquiring_url)
    {
        if (is_null($acquiring_url)) {
            throw new \InvalidArgumentException('non-nullable acquiring_url cannot be null');
        }
        $this->container['acquiring_url'] = $acquiring_url;

        return $this;
    }

    /**
     * Gets successful_link
     *
     * @return string
     */
    public function getSuccessfulLink()
    {
        return $this->container['successful_link'];
    }

    /**
     * Sets successful_link
     *
     * @param string $successful_link successful_link
     *
     * @return self
     */
    public function setSuccessfulLink($successful_link)
    {
        if (is_null($successful_link)) {
            throw new \InvalidArgumentException('non-nullable successful_link cannot be null');
        }
        $this->container['successful_link'] = $successful_link;

        return $this;
    }

    /**
     * Gets failure_link
     *
     * @return string
     */
    public function getFailureLink()
    {
        return $this->container['failure_link'];
    }

    /**
     * Sets failure_link
     *
     * @param string $failure_link failure_link
     *
     * @return self
     */
    public function setFailureLink($failure_link)
    {
        if (is_null($failure_link)) {
            throw new \InvalidArgumentException('non-nullable failure_link cannot be null');
        }
        $this->container['failure_link'] = $failure_link;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return mixed[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param mixed[] $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


